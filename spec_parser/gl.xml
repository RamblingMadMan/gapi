<module name="gl">
  <!--
YOU DO NOT NEED TO EDIT THIS FILE DIRECTLY

It was automatically generated by gen.py on 2016-07-04 11:48:04.221711
Please contact the author or visit the project page for more information:

https://github.com/AlexandreFournier/gl-spec-parser
-->
  <libraries>
    <library name="gl4">
      <functions>
        <documentation>glActiveShaderProgram - set the active program object for a program pipeline object
</documentation>
        <function name="glActiveShaderProgram" type="void">
          <param name="pipeline" type="GLuint"/>
          <param name="program" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glActiveTexture - select active texture unit
</documentation>
        <function name="glActiveTexture" type="void">
          <param name="texture" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glAttachShader - Attaches a shader object to a program object
</documentation>
        <function name="glAttachShader" type="void">
          <param name="program" type="GLuint"/>
          <param name="shader" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBeginConditionalRender - start conditional rendering
</documentation>
        <function name="glBeginConditionalRender" type="void">
          <param name="id" type="GLuint"/>
          <param name="mode" type="GLenum"/>
        </function>
        <function name="glEndConditionalRender" type="void"/>
      </functions>
      <functions>
        <documentation>glBeginQuery - delimit the boundaries of a query object
</documentation>
        <function name="glBeginQuery" type="void">
          <param name="target" type="GLenum"/>
          <param name="id" type="GLuint"/>
        </function>
        <function name="glEndQuery" type="void">
          <param name="target" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glBeginQueryIndexed, glEndQueryIndexed - delimit the boundaries of a query object on an indexed target
</documentation>
        <function name="glBeginQueryIndexed" type="void">
          <param name="target" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="id" type="GLuint"/>
        </function>
        <function name="glEndQueryIndexed" type="void">
          <param name="target" type="GLenum"/>
          <param name="index" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBeginTransformFeedback - start transform feedback operation
</documentation>
        <function name="glBeginTransformFeedback" type="void">
          <param name="primitiveMode" type="GLenum"/>
        </function>
        <function name="glEndTransformFeedback" type="void"/>
      </functions>
      <functions>
        <documentation>glBindAttribLocation - Associates a generic vertex attribute index with a named attribute variable
</documentation>
        <function name="glBindAttribLocation" type="void">
          <param name="program" type="GLuint"/>
          <param name="index" type="GLuint"/>
          <param name="name" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindBuffer - bind a named buffer object
</documentation>
        <function name="glBindBuffer" type="void">
          <param name="target" type="GLenum"/>
          <param name="buffer" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindBufferBase - bind a buffer object to an indexed buffer target
</documentation>
        <function name="glBindBufferBase" type="void">
          <param name="target" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="buffer" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindBufferRange - bind a range within a buffer object to an indexed buffer target
</documentation>
        <function name="glBindBufferRange" type="void">
          <param name="target" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="buffer" type="GLuint"/>
          <param name="offset" type="GLintptr"/>
          <param name="size" type="GLsizeiptr"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindFragDataLocation - bind a user-defined varying out variable to a fragment shader color number
</documentation>
        <function name="glBindFragDataLocation" type="void">
          <param name="program" type="GLuint"/>
          <param name="colorNumber" type="GLuint"/>
          <param name="name" type="char *"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindFragDataLocationIndexed - bind a user-defined varying out variable to a fragment shader color number and index
</documentation>
        <function name="glBindFragDataLocationIndexed" type="void">
          <param name="program" type="GLuint"/>
          <param name="colorNumber" type="GLuint"/>
          <param name="index" type="GLuint"/>
          <param name="name" type="char *"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindFramebuffer - bind a framebuffer to a framebuffer target
</documentation>
        <function name="glBindFramebuffer" type="void">
          <param name="target" type="GLenum"/>
          <param name="framebuffer" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindProgramPipeline - bind a program pipeline to the current context
</documentation>
        <function name="glBindProgramPipeline" type="void">
          <param name="pipeline" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindRenderbuffer - bind a renderbuffer to a renderbuffer target
</documentation>
        <function name="glBindRenderbuffer" type="void">
          <param name="target" type="GLenum"/>
          <param name="renderbuffer" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindSampler - bind a named sampler to a texturing target
</documentation>
        <function name="glBindSampler" type="void">
          <param name="unit" type="GLuint"/>
          <param name="sampler" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindTexture - bind a named texture to a texturing target
</documentation>
        <function name="glBindTexture" type="void">
          <param name="target" type="GLenum"/>
          <param name="texture" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindTransformFeedback - bind a transform feedback object
</documentation>
        <function name="glBindTransformFeedback" type="void">
          <param name="target" type="GLenum"/>
          <param name="id" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBindVertexArray - bind a vertex array object
</documentation>
        <function name="glBindVertexArray" type="void">
          <param name="array" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glBlendColor - set the blend color
</documentation>
        <function name="glBlendColor" type="void">
          <param name="red" type="GLclampf"/>
          <param name="green" type="GLclampf"/>
          <param name="blue" type="GLclampf"/>
          <param name="alpha" type="GLclampf"/>
        </function>
      </functions>
      <functions>
        <documentation>glBlendEquation - specify the equation used for both the RGB blend equation and the Alpha blend equation
</documentation>
        <function name="glBlendEquation" type="void">
          <param name="mode" type="GLenum"/>
        </function>
        <function name="glBlendEquationi" type="void">
          <param name="buf" type="GLuint"/>
          <param name="mode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glBlendEquationSeparate - set the RGB blend equation and the alpha blend equation separately
</documentation>
        <function name="glBlendEquationSeparate" type="void">
          <param name="modeRGB" type="GLenum"/>
          <param name="modeAlpha" type="GLenum"/>
        </function>
        <function name="glBlendEquationSeparatei" type="void">
          <param name="buf" type="GLuint"/>
          <param name="modeRGB" type="GLenum"/>
          <param name="modeAlpha" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glBlendFunc - specify pixel arithmetic
</documentation>
        <function name="glBlendFunc" type="void">
          <param name="sfactor" type="GLenum"/>
          <param name="dfactor" type="GLenum"/>
        </function>
        <function name="glBlendFunci" type="void">
          <param name="buf" type="GLuint"/>
          <param name="sfactor" type="GLenum"/>
          <param name="dfactor" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glBlendFuncSeparate - specify pixel arithmetic for RGB and alpha components separately
</documentation>
        <function name="glBlendFuncSeparate" type="void">
          <param name="srcRGB" type="GLenum"/>
          <param name="dstRGB" type="GLenum"/>
          <param name="srcAlpha" type="GLenum"/>
          <param name="dstAlpha" type="GLenum"/>
        </function>
        <function name="glBlendFuncSeparatei" type="void">
          <param name="buf" type="GLuint"/>
          <param name="srcRGB" type="GLenum"/>
          <param name="dstRGB" type="GLenum"/>
          <param name="srcAlpha" type="GLenum"/>
          <param name="dstAlpha" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glBlitFramebuffer - copy a block of pixels from the read framebuffer to the draw framebuffer
</documentation>
        <function name="glBlitFramebuffer" type="void">
          <param name="srcX0" type="GLint"/>
          <param name="srcY0" type="GLint"/>
          <param name="srcX1" type="GLint"/>
          <param name="srcY1" type="GLint"/>
          <param name="dstX0" type="GLint"/>
          <param name="dstY0" type="GLint"/>
          <param name="dstX1" type="GLint"/>
          <param name="dstY1" type="GLint"/>
          <param name="mask" type="GLbitfield"/>
          <param name="filter" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glBufferData - creates and initializes a buffer object's data store
</documentation>
        <function name="glBufferData" type="void">
          <param name="target" type="GLenum"/>
          <param name="size" type="GLsizeiptr"/>
          <param name="data" type="GLvoid *"/>
          <param name="usage" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glBufferSubData - updates a subset of a buffer object's data store
</documentation>
        <function name="glBufferSubData" type="void">
          <param name="target" type="GLenum"/>
          <param name="offset" type="GLintptr"/>
          <param name="size" type="GLsizeiptr"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glCheckFramebufferStatus - check the completeness status of a framebuffer
</documentation>
        <function name="glCheckFramebufferStatus" type="GLenum">
          <param name="target" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glClampColor - specify whether data read via
</documentation>
        <function name="glClampColor" type="void">
          <param name="target" type="GLenum"/>
          <param name="clamp" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glClear - clear buffers to preset values
</documentation>
        <function name="glClear" type="void">
          <param name="mask" type="GLbitfield"/>
        </function>
      </functions>
      <functions>
        <documentation>glClearBuffer - clear individual buffers of the currently bound draw framebuffer
</documentation>
        <function name="glClearBufferiv" type="void">
          <param name="buffer" type="GLenum"/>
          <param name="drawBuffer" type="GLint"/>
          <param name="value" type="GLint *"/>
        </function>
        <function name="glClearBufferuiv" type="void">
          <param name="buffer" type="GLenum"/>
          <param name="drawBuffer" type="GLint"/>
          <param name="value" type="GLuint *"/>
        </function>
        <function name="glClearBufferfv" type="void">
          <param name="buffer" type="GLenum"/>
          <param name="drawBuffer" type="GLint"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glClearBufferfi" type="void">
          <param name="buffer" type="GLenum"/>
          <param name="drawBuffer" type="GLint"/>
          <param name="depth" type="GLfloat"/>
          <param name="stencil" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glClearColor - specify clear values for the color buffers
</documentation>
        <function name="glClearColor" type="void">
          <param name="red" type="GLclampf"/>
          <param name="green" type="GLclampf"/>
          <param name="blue" type="GLclampf"/>
          <param name="alpha" type="GLclampf"/>
        </function>
      </functions>
      <functions>
        <documentation>glClearDepth - specify the clear value for the depth buffer
</documentation>
        <function name="glClearDepth" type="void">
          <param name="depth" type="GLclampd"/>
        </function>
        <function name="glClearDepthf" type="void">
          <param name="depth" type="GLclampf"/>
        </function>
      </functions>
      <functions>
        <documentation>glClearStencil - specify the clear value for the stencil buffer
</documentation>
        <function name="glClearStencil" type="void">
          <param name="s" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glClientWaitSync - block and wait for a sync object to become signaled
</documentation>
        <function name="glClientWaitSync" type="GLenum">
          <param name="sync" type="GLsync"/>
          <param name="flags" type="GLbitfield"/>
          <param name="timeout" type="GLuint64"/>
        </function>
      </functions>
      <functions>
        <documentation>glColorMask - enable and disable writing of frame buffer color components
</documentation>
        <function name="glColorMask" type="void">
          <param name="red" type="GLboolean"/>
          <param name="green" type="GLboolean"/>
          <param name="blue" type="GLboolean"/>
          <param name="alpha" type="GLboolean"/>
        </function>
      </functions>
      <functions>
        <documentation>glCompileShader - Compiles a shader object
</documentation>
        <function name="glCompileShader" type="void">
          <param name="shader" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glCompressedTexImage1D - specify a one-dimensional texture image in a compressed format
</documentation>
        <function name="glCompressedTexImage1D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalformat" type="GLenum"/>
          <param name="width" type="GLsizei"/>
          <param name="border" type="GLint"/>
          <param name="imageSize" type="GLsizei"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glCompressedTexImage2D - specify a two-dimensional texture image in a compressed format
</documentation>
        <function name="glCompressedTexImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalformat" type="GLenum"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="border" type="GLint"/>
          <param name="imageSize" type="GLsizei"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glCompressedTexImage3D - specify a three-dimensional texture image in a compressed format
</documentation>
        <function name="glCompressedTexImage3D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalformat" type="GLenum"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="depth" type="GLsizei"/>
          <param name="border" type="GLint"/>
          <param name="imageSize" type="GLsizei"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glCompressedTexSubImage1D - specify a one-dimensional texture subimage in a compressed format
</documentation>
        <function name="glCompressedTexSubImage1D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="imageSize" type="GLsizei"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glCompressedTexSubImage2D - specify a two-dimensional texture subimage in a compressed format
</documentation>
        <function name="glCompressedTexSubImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="imageSize" type="GLsizei"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glCompressedTexSubImage3D - specify a three-dimensional texture subimage in a compressed format
</documentation>
        <function name="glCompressedTexSubImage3D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="zoffset" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="depth" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="imageSize" type="GLsizei"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glCopyBufferSubData - copy part of the data store of a buffer object to the data store of another buffer object
</documentation>
        <function name="glCopyBufferSubData" type="void">
          <param name="readtarget" type="GLenum"/>
          <param name="writetarget" type="GLenum"/>
          <param name="readoffset" type="GLintptr"/>
          <param name="writeoffset" type="GLintptr"/>
          <param name="size" type="GLsizeiptr"/>
        </function>
      </functions>
      <functions>
        <documentation>glCopyTexImage1D - copy pixels into a 1D texture image
</documentation>
        <function name="glCopyTexImage1D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalformat" type="GLenum"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="border" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glCopyTexImage2D - copy pixels into a 2D texture image
</documentation>
        <function name="glCopyTexImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalformat" type="GLenum"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="border" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glCopyTexSubImage1D - copy a one-dimensional texture subimage
</documentation>
        <function name="glCopyTexSubImage1D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glCopyTexSubImage2D - copy a two-dimensional texture subimage
</documentation>
        <function name="glCopyTexSubImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glCopyTexSubImage3D - copy a three-dimensional texture subimage
</documentation>
        <function name="glCopyTexSubImage3D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="zoffset" type="GLint"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glCreateProgram - Creates a program object
</documentation>
        <function name="glCreateProgram" type="GLuint"/>
      </functions>
      <functions>
        <documentation>glCreateShader - Creates a shader object
</documentation>
        <function name="glCreateShader" type="GLuint">
          <param name="shaderType" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glCreateShaderProgramv - create a stand-alone program from an array of null-terminated source code strings
</documentation>
        <function name="glCreateShaderProgramv" type="GLuint">
          <param name="type" type="GLenum"/>
          <param name="count" type="GLsizei"/>
          <param name="strings" type="char **"/>
        </function>
      </functions>
      <functions>
        <documentation>glCullFace - specify whether front- or back-facing facets can be culled
</documentation>
        <function name="glCullFace" type="void">
          <param name="mode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteBuffers - delete named buffer objects
</documentation>
        <function name="glDeleteBuffers" type="void">
          <param name="n" type="GLsizei"/>
          <param name="buffers" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteFramebuffers - delete framebuffer objects
</documentation>
        <function name="glDeleteFramebuffers" type="void">
          <param name="n" type="GLsizei"/>
          <param name="framebuffers" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteProgram - Deletes a program object
</documentation>
        <function name="glDeleteProgram" type="void">
          <param name="program" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteProgramPipelines - delete program pipeline objects
</documentation>
        <function name="glDeleteProgramPipelines" type="void">
          <param name="n" type="GLsizei"/>
          <param name="pipelines" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteQueries - delete named query objects
</documentation>
        <function name="glDeleteQueries" type="void">
          <param name="n" type="GLsizei"/>
          <param name="ids" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteRenderbuffers - delete renderbuffer objects
</documentation>
        <function name="glDeleteRenderbuffers" type="void">
          <param name="n" type="GLsizei"/>
          <param name="renderbuffers" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteSamplers - delete named sampler objects
</documentation>
        <function name="glDeleteSamplers" type="void">
          <param name="n" type="GLsizei"/>
          <param name="ids" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteShader - Deletes a shader object
</documentation>
        <function name="glDeleteShader" type="void">
          <param name="shader" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteSync - delete a sync object
</documentation>
        <function name="glDeleteSync" type="void">
          <param name="sync" type="GLsync"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteTextures - delete named textures
</documentation>
        <function name="glDeleteTextures" type="void">
          <param name="n" type="GLsizei"/>
          <param name="textures" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteTransformFeedbacks - delete transform feedback objects
</documentation>
        <function name="glDeleteTransformFeedbacks" type="void">
          <param name="n" type="GLsizei"/>
          <param name="ids" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDeleteVertexArrays - delete vertex array objects
</documentation>
        <function name="glDeleteVertexArrays" type="void">
          <param name="n" type="GLsizei"/>
          <param name="arrays" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDepthFunc - specify the value used for depth buffer comparisons
</documentation>
        <function name="glDepthFunc" type="void">
          <param name="func" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glDepthMask - enable or disable writing into the depth buffer
</documentation>
        <function name="glDepthMask" type="void">
          <param name="flag" type="GLboolean"/>
        </function>
      </functions>
      <functions>
        <documentation>glDepthRange - specify mapping of depth values from normalized device coordinates to window coordinates
</documentation>
        <function name="glDepthRange" type="void">
          <param name="nearVal" type="GLclampd"/>
          <param name="farVal" type="GLclampd"/>
        </function>
        <function name="glDepthRangef" type="void">
          <param name="nearVal" type="GLclampf"/>
          <param name="farVal" type="GLclampf"/>
        </function>
      </functions>
      <functions>
        <documentation>glDepthRangeArray - specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
</documentation>
        <function name="glDepthRangeArrayv" type="void">
          <param name="first" type="GLuint"/>
          <param name="count" type="GLsizei"/>
          <param name="v" type="GLclampd *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDepthRangeIndexed - specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
</documentation>
        <function name="glDepthRangeArrayv" type="void">
          <param name="index" type="GLuint"/>
          <param name="nearVal" type="GLclampd"/>
          <param name="farVal" type="GLclampd"/>
        </function>
      </functions>
      <functions>
        <documentation>glDetachShader - Detaches a shader object from a program object to which it is attached
</documentation>
        <function name="glDetachShader" type="void">
          <param name="program" type="GLuint"/>
          <param name="shader" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawArrays - render primitives from array data
</documentation>
        <function name="glDrawArrays" type="void">
          <param name="mode" type="GLenum"/>
          <param name="first" type="GLint"/>
          <param name="count" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawArraysIndirect - render primitives from array data, taking parameters from memory
</documentation>
        <function name="glDrawArraysIndirect" type="void">
          <param name="mode" type="GLenum"/>
          <param name="indirect" type="void *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawArraysInstanced - draw multiple instances of a range of elements
</documentation>
        <function name="glDrawArraysInstanced" type="void">
          <param name="mode" type="GLenum"/>
          <param name="first" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="primcount" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawBuffer - specify which color buffers are to be drawn into
</documentation>
        <function name="glDrawBuffer" type="void">
          <param name="mode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawBuffers - Specifies a list of color buffers to be drawn into
</documentation>
        <function name="glDrawBuffers" type="void">
          <param name="n" type="GLsizei"/>
          <param name="bufs" type="GLenum *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawElements - render primitives from array data
</documentation>
        <function name="glDrawElements" type="void">
          <param name="mode" type="GLenum"/>
          <param name="count" type="GLsizei"/>
          <param name="type" type="GLenum"/>
          <param name="indices" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawElementsBaseVertex - render primitives from array data with a per-element offset
</documentation>
        <function name="glDrawElementsBaseVertex" type="void">
          <param name="mode" type="GLenum"/>
          <param name="count" type="GLsizei"/>
          <param name="type" type="GLenum"/>
          <param name="indices" type="GLvoid *"/>
          <param name="basevertex" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawElementsIndirect - render indexed primitives from array data, taking parameters from memory
</documentation>
        <function name="glDrawElementsIndirect" type="void">
          <param name="mode" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="indirect" type="void *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawElementsInstanced - draw multiple instances of a set of elements
</documentation>
        <function name="glDrawElementsInstanced" type="void">
          <param name="mode" type="GLenum"/>
          <param name="count" type="GLsizei"/>
          <param name="type" type="GLenum"/>
          <param name="indices" type="void *"/>
          <param name="primcount" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawElementsInstancedBaseVertex - render multiple instances of a set of primitives from array data with a per-element offset
</documentation>
        <function name="glDrawElementsInstancedBaseVertex" type="void">
          <param name="mode" type="GLenum"/>
          <param name="count" type="GLsizei"/>
          <param name="type" type="GLenum"/>
          <param name="indices" type="GLvoid *"/>
          <param name="primcount" type="GLsizei"/>
          <param name="basevertex" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawRangeElements - render primitives from array data
</documentation>
        <function name="glDrawRangeElements" type="void">
          <param name="mode" type="GLenum"/>
          <param name="start" type="GLuint"/>
          <param name="end" type="GLuint"/>
          <param name="count" type="GLsizei"/>
          <param name="type" type="GLenum"/>
          <param name="indices" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawRangeElementsBaseVertex - render primitives from array data with a per-element offset
</documentation>
        <function name="glDrawRangeElementsBaseVertex" type="void">
          <param name="mode" type="GLenum"/>
          <param name="start" type="GLuint"/>
          <param name="end" type="GLuint"/>
          <param name="count" type="GLsizei"/>
          <param name="type" type="GLenum"/>
          <param name="indices" type="GLvoid *"/>
          <param name="basevertex" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawTransformFeedback - render primitives using a count derived from a transform feedback object
</documentation>
        <function name="glDrawTransformFeedback" type="void">
          <param name="mode" type="GLenum"/>
          <param name="id" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glDrawTransformFeedbackStream - render primitives using a count derived from a specifed stream of a transform feedback object
</documentation>
        <function name="glDrawTransformFeedbackStream" type="void">
          <param name="mode" type="GLenum"/>
          <param name="id" type="GLuint"/>
          <param name="stream" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glEnable - enable or disable server-side GL capabilities
</documentation>
        <function name="glEnable" type="void">
          <param name="cap" type="GLenum"/>
        </function>
        <function name="glDisable" type="void">
          <param name="cap" type="GLenum"/>
        </function>
        <function name="glEnablei" type="void">
          <param name="cap" type="GLenum"/>
          <param name="index" type="GLuint"/>
        </function>
        <function name="glDisablei" type="void">
          <param name="cap" type="GLenum"/>
          <param name="index" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glEnableVertexAttribArray - Enable or disable a generic vertex attribute array
</documentation>
        <function name="glEnableVertexAttribArray" type="void">
          <param name="index" type="GLuint"/>
        </function>
        <function name="glDisableVertexAttribArray" type="void">
          <param name="index" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glFenceSync - create a new sync object and insert it into the GL command stream
</documentation>
        <function name="glFenceSync" type="GLsync">
          <param name="condition" type="GLenum"/>
          <param name="flags" type="GLbitfield"/>
        </function>
      </functions>
      <functions>
        <documentation>glFinish - block until all GL execution is complete
</documentation>
        <function name="glFinish" type="void">
          <param name="void" type=""/>
        </function>
      </functions>
      <functions>
        <documentation>glFlush - force execution of GL commands in finite time
</documentation>
        <function name="glFlush" type="void">
          <param name="void" type=""/>
        </function>
      </functions>
      <functions>
        <documentation>glFlushMappedBufferRange - indicate modifications to a range of a mapped buffer
</documentation>
        <function name="glFlushMappedBufferRange" type="GLsync">
          <param name="target" type="GLenum"/>
          <param name="offset" type="GLintptr"/>
          <param name="length" type="GLsizeiptr"/>
        </function>
      </functions>
      <functions>
        <documentation>glFramebufferRenderbuffer - attach a renderbuffer as a logical buffer to the currently bound framebuffer object
</documentation>
        <function name="glFramebufferRenderbuffer" type="GLsync">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="renderbuffertarget" type="GLenum"/>
          <param name="renderbuffer" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glFramebufferTexture - attach a level of a texture object as a logical buffer to the currently bound framebuffer object
</documentation>
        <function name="glFramebufferTexture" type="void">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="texture" type="GLuint"/>
          <param name="level" type="GLint"/>
        </function>
        <function name="glFramebufferTexture1D" type="void">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="textarget" type="GLenum"/>
          <param name="texture" type="GLuint"/>
          <param name="level" type="GLint"/>
        </function>
        <function name="glFramebufferTexture2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="textarget" type="GLenum"/>
          <param name="texture" type="GLuint"/>
          <param name="level" type="GLint"/>
        </function>
        <function name="glFramebufferTexture3D" type="void">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="textarget" type="GLenum"/>
          <param name="texture" type="GLuint"/>
          <param name="level" type="GLint"/>
          <param name="layer" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glFramebufferTextureLayer - attach a single layer of a texture to a framebuffer
</documentation>
        <function name="glFramebufferTextureLayer" type="void">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="texture" type="GLuint"/>
          <param name="level" type="GLint"/>
          <param name="layer" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glFrontFace - define front- and back-facing polygons
</documentation>
        <function name="glFrontFace" type="void">
          <param name="mode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenBuffers - generate buffer object names
</documentation>
        <function name="glGenBuffers" type="void">
          <param name="n" type="GLsizei"/>
          <param name="buffers" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenFramebuffers - generate framebuffer object names
</documentation>
        <function name="glGenFramebuffers" type="void">
          <param name="n" type="GLsizei"/>
          <param name="ids" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenProgramPipelines - reserve program pipeline object names
</documentation>
        <function name="glGenProgramPipelines" type="void">
          <param name="n" type="GLsizei"/>
          <param name="pipelines" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenQueries - generate query object names
</documentation>
        <function name="glGenQueries" type="void">
          <param name="n" type="GLsizei"/>
          <param name="ids" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenRenderbuffers - generate renderbuffer object names
</documentation>
        <function name="glGenRenderbuffers" type="void">
          <param name="n" type="GLsizei"/>
          <param name="renderbuffers" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenSamplers - generate sampler object names
</documentation>
        <function name="glGenSamplers" type="void">
          <param name="n" type="GLsizei"/>
          <param name="samplers" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenTextures - generate texture names
</documentation>
        <function name="glGenTextures" type="void">
          <param name="n" type="GLsizei"/>
          <param name="textures" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenTransformFeedbacks - reserve transform feedback object names
</documentation>
        <function name="glGenTransformFeedbacks" type="void">
          <param name="n" type="GLsizei"/>
          <param name="ids" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenVertexArrays - generate vertex array object names
</documentation>
        <function name="glGenVertexArrays" type="void">
          <param name="n" type="GLsizei"/>
          <param name="arrays" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGenerateMipmap - generate mipmaps for a specified texture target
</documentation>
        <function name="glGenerateMipmap" type="void">
          <param name="target" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glGet - return the value or values of a selected parameter
</documentation>
        <function name="glGetBooleanv" type="void">
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLboolean *"/>
        </function>
        <function name="glGetDoublev" type="void">
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLdouble *"/>
        </function>
        <function name="glGetFloatv" type="void">
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLfloat *"/>
        </function>
        <function name="glGetIntegerv" type="void">
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
        <function name="glGetInteger64v" type="void">
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint64 *"/>
        </function>
        <function name="glGetBooleani_v" type="void">
          <param name="pname" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="data" type="GLboolean *"/>
        </function>
        <function name="glGetIntegeri_v" type="void">
          <param name="pname" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="data" type="GLint *"/>
        </function>
        <function name="glGetInteger64i_v" type="void">
          <param name="pname" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="data" type="GLint64 *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetActiveAttrib - Returns information about an active attribute variable for the specified program object
</documentation>
        <function name="glGetActiveAttrib" type="void">
          <param name="program" type="GLuint"/>
          <param name="index" type="GLuint"/>
          <param name="bufSize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="size" type="GLint *"/>
          <param name="type" type="GLenum *"/>
          <param name="name" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetActiveSubroutineName - query the name of an active shader subroutine
</documentation>
        <function name="glGetActiveSubroutineName" type="void">
          <param name="program" type="GLuint"/>
          <param name="shadertype" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="bufsize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="name" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetActiveSubroutineUniform - query a property of an active shader subroutine uniform
</documentation>
        <function name="glGetActiveSubroutineUniformiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="shadertype" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="values" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetActiveSubroutineUniformName - query the name of an active shader subroutine uniform
</documentation>
        <function name="glGetActiveSubroutineUniformName" type="void">
          <param name="program" type="GLuint"/>
          <param name="shadertype" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="bufsize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="name" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetActiveUniform - Returns information about an active uniform variable for the specified program object
</documentation>
        <function name="glGetActiveUniform" type="void">
          <param name="program" type="GLuint"/>
          <param name="index" type="GLuint"/>
          <param name="bufSize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="size" type="GLint *"/>
          <param name="type" type="GLenum *"/>
          <param name="name" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetActiveUniformBlock - query information about an active uniform block
</documentation>
        <function name="glGetActiveUniformBlockiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="uniformBlockIndex" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetActiveUniformBlockName - retrieve the name of an active uniform block
</documentation>
        <function name="glGetActiveUniformBlockName" type="void">
          <param name="program" type="GLuint"/>
          <param name="uniformBlockIndex" type="GLuint"/>
          <param name="bufSize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="uniformBlockName" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetActiveUniformName - query the name of an active uniform
</documentation>
        <function name="glGetActiveUniformName" type="void">
          <param name="program" type="GLuint"/>
          <param name="uniformIndex" type="GLuint"/>
          <param name="bufSize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="uniformName" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetActiveUniformsiv - Returns information about several active uniform variables for the specified program object
</documentation>
        <function name="glGetActiveUniformsiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="uniformCount" type="GLsizei"/>
          <param name="uniformIndices" type="GLuint *"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetAttachedShaders - Returns the handles of the shader objects attached to a program object
</documentation>
        <function name="glGetAttachedShaders" type="void">
          <param name="program" type="GLuint"/>
          <param name="maxCount" type="GLsizei"/>
          <param name="count" type="GLsizei *"/>
          <param name="shaders" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetAttribLocation - Returns the location of an attribute variable
</documentation>
        <function name="glGetAttribLocation" type="GLint">
          <param name="program" type="GLuint"/>
          <param name="name" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetBufferParameteriv - return parameters of a buffer object
</documentation>
        <function name="glGetBufferParameteriv" type="void">
          <param name="target" type="GLenum"/>
          <param name="value" type="GLenum"/>
          <param name="data" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetBufferPointerv - return the pointer to a mapped buffer object's data store
</documentation>
        <function name="glGetBufferPointerv" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLvoid **"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetBufferSubData - returns a subset of a buffer object's data store
</documentation>
        <function name="glGetBufferSubData" type="void">
          <param name="target" type="GLenum"/>
          <param name="offset" type="GLintptr"/>
          <param name="size" type="GLsizeiptr"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetCompressedTexImage - return a compressed texture image
</documentation>
        <function name="glGetCompressedTexImage" type="void">
          <param name="target" type="GLenum"/>
          <param name="lod" type="GLint"/>
          <param name="img" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetError - return error information
</documentation>
        <function name="glGetError" type="GLenum">
          <param name="void" type=""/>
        </function>
      </functions>
      <functions>
        <documentation>glGetFragDataIndex - query the bindings of color indices to user-defined varying out variables
</documentation>
        <function name="glGetFragDataIndex" type="GLint">
          <param name="program" type="GLuint"/>
          <param name="name" type="char *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetFragDataLocation - query the bindings of color numbers to user-defined varying out variables
</documentation>
        <function name="glGetFragDataLocation" type="GLint">
          <param name="program" type="GLuint"/>
          <param name="name" type="char *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetFramebufferAttachmentParameteriv - retrieve information about attachments of a bound framebuffer object
</documentation>
        <function name="glGetFramebufferAttachmentParameter" type="void">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetMultisamplefv - retrieve the location of a sample
</documentation>
        <function name="glGetMultisamplefv" type="void">
          <param name="pname" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="val" type="GLfloat *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetProgramiv - Returns a parameter from a program object
</documentation>
        <function name="glGetProgramiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetProgramBinary - return a binary representation of a program object's compiled and linked executable source
</documentation>
        <function name="glGetProgramBinary" type="void">
          <param name="program" type="GLuint"/>
          <param name="bufsize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="binaryFormat" type="GLenum *"/>
          <param name="binary" type="void *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetProgramInfoLog - Returns the information log for a program object
</documentation>
        <function name="glGetProgramInfoLog" type="void">
          <param name="program" type="GLuint"/>
          <param name="maxLength" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="infoLog" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetProgramPipeline - retrieve properties of a program pipeline object
</documentation>
        <function name="glGetProgramPipelineiv" type="void">
          <param name="pipeline" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetProgramPipelineInfoLog - retrieve the info log string from a program pipeline object
</documentation>
        <function name="glGetProgramPipelineInfoLog" type="void">
          <param name="pipeline" type="GLuint"/>
          <param name="bufSize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="infoLog" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetProgramStage - retrieve properties of a program object corresponding to a specified shader stage
</documentation>
        <function name="glGetProgramStageiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="shadertype" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="values" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetQueryIndexediv - return parameters of an indexed query object target
</documentation>
        <function name="glGetQueryIndexediv" type="void">
          <param name="target" type="GLenum"/>
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetQueryObject - return parameters of a query object
</documentation>
        <function name="glGetQueryObjectiv" type="void">
          <param name="id" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
        <function name="glGetQueryObjectuiv" type="void">
          <param name="id" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLuint *"/>
        </function>
        <function name="glGetQueryObjecti64v" type="void">
          <param name="id" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint64 *"/>
        </function>
        <function name="glGetQueryObjectui64v" type="void">
          <param name="id" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLuint64 *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetQueryiv - return parameters of a query object target
</documentation>
        <function name="glGetQueryiv" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetRenderbufferParameteriv - retrieve information about a bound renderbuffer object
</documentation>
        <function name="glGetRenderbufferParameteriv" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetSamplerParameter - return sampler parameter values
</documentation>
        <function name="glGetSamplerParameterfv" type="void">
          <param name="sampler" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLfloat *"/>
        </function>
        <function name="glGetSamplerParameteriv" type="void">
          <param name="sampler" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetShaderiv - Returns a parameter from a shader object
</documentation>
        <function name="glGetShaderiv" type="void">
          <param name="shader" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetShaderInfoLog - Returns the information log for a shader object
</documentation>
        <function name="glGetShaderInfoLog" type="void">
          <param name="shader" type="GLuint"/>
          <param name="maxLength" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="infoLog" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetShaderPrecisionFormat - retrieve the range and precision for numeric formats supported by the shader compiler
</documentation>
        <function name="glGetShaderPrecisionFormat" type="void">
          <param name="shaderType" type="GLenum"/>
          <param name="precisionType" type="GLenum"/>
          <param name="range" type="GLint *"/>
          <param name="precision" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetShaderSource - Returns the source code string from a shader object
</documentation>
        <function name="glGetShaderSource" type="void">
          <param name="shader" type="GLuint"/>
          <param name="bufSize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="source" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetString - return a string describing the current GL connection
</documentation>
        <function name="glGetString" type="GLubyte*">
          <param name="name" type="GLenum"/>
        </function>
        <function name="glGetStringi" type="GLubyte*">
          <param name="name" type="GLenum"/>
          <param name="index" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetSubroutineIndex - retrieve the index of a subroutine uniform of a given shader stage within a program
</documentation>
        <function name="glGetSubroutineIndex" type="GLuint">
          <param name="program" type="GLuint"/>
          <param name="shadertype" type="GLenum"/>
          <param name="name" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetSubroutineUniformLocation - retrieve the location of a subroutine uniform of a given shader stage within a program
</documentation>
        <function name="glGetSubroutineUniformLocation" type="GLint">
          <param name="program" type="GLuint"/>
          <param name="shadertype" type="GLenum"/>
          <param name="name" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetSynciv - query the properties of a sync object
</documentation>
        <function name="glGetSynciv" type="void">
          <param name="sync" type="GLsync"/>
          <param name="pname" type="GLenum"/>
          <param name="bufSize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="values" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetTexImage - return a texture image
</documentation>
        <function name="glGetTexImage" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="img" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetTexLevelParameter - return texture parameter values for a specific level of detail
</documentation>
        <function name="glGetTexLevelParameterfv" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLfloat *"/>
        </function>
        <function name="glGetTexLevelParameteriv" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetTexParameter - return texture parameter values
</documentation>
        <function name="glGetTexParameterfv" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLfloat *"/>
        </function>
        <function name="glGetTexParameteriv" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetTransformFeedbackVarying - retrieve information about varying variables selected for transform feedback
</documentation>
        <function name="glGetTransformFeedbackVarying" type="void">
          <param name="program" type="GLuint"/>
          <param name="index" type="GLuint"/>
          <param name="bufSize" type="GLsizei"/>
          <param name="length" type="GLsizei *"/>
          <param name="size" type="GLsizei"/>
          <param name="type" type="GLenum *"/>
          <param name="name" type="char *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetUniformfv - Returns the value of a uniform variable
</documentation>
        <function name="glGetUniformfv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="params" type="GLfloat *"/>
        </function>
        <function name="glGetUniformiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetUniformBlockIndex - retrieve the index of a named uniform block
</documentation>
        <function name="glGetUniformBlockIndex" type="GLuint">
          <param name="program" type="GLuint"/>
          <param name="uniformBlockName" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetUniformIndices - retrieve the index of a named uniform block
</documentation>
        <function name="glGetUniformIndices" type="GLuint">
          <param name="program" type="GLuint"/>
          <param name="uniformCount" type="GLsizei"/>
          <param name="uniformNames" type="GLchar **"/>
          <param name="uniformIndices" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetUniformLocation - Returns the location of a uniform variable
</documentation>
        <function name="glGetUniformLocation" type="GLint">
          <param name="program" type="GLuint"/>
          <param name="name" type="GLchar *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetUniformSubroutine - retrieve the value of a subroutine uniform of a given shader stage of the current program
</documentation>
        <function name="glGetUniformSubroutineuiv" type="void">
          <param name="shadertype" type="GLenum"/>
          <param name="location" type="GLint"/>
          <param name="values" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetVertexAttribdv - Return a generic vertex attribute parameter
</documentation>
        <function name="glGetVertexAttribdv" type="void">
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLdouble *"/>
        </function>
        <function name="glGetVertexAttribfv" type="void">
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLfloat *"/>
        </function>
        <function name="glGetVertexAttribiv" type="void">
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
        <function name="glGetVertexAttribIiv" type="void">
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
        <function name="glGetVertexAttribIuiv" type="void">
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLuint *"/>
        </function>
        <function name="glGetVertexAttribLdv" type="void">
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLdouble *"/>
        </function>
      </functions>
      <functions>
        <documentation>glGetVertexAttribPointerv - return the address of the specified generic vertex attribute pointer
</documentation>
        <function name="glGetVertexAttribPointerv" type="void">
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="pointer" type="GLvoid **"/>
        </function>
      </functions>
      <functions>
        <documentation>glHint - specify implementation-specific hints
</documentation>
        <function name="glHint" type="void">
          <param name="target" type="GLenum"/>
          <param name="mode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsBuffer - determine if a name corresponds to a buffer object
</documentation>
        <function name="glIsBuffer" type="GLboolean">
          <param name="buffer" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsEnabled - test whether a capability is enabled
</documentation>
        <function name="glIsEnabled" type="GLboolean">
          <param name="cap" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsFramebuffer - determine if a name corresponds to a framebuffer object
</documentation>
        <function name="glIsFramebuffer" type="GLboolean">
          <param name="framebuffer" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsProgram - Determines if a name corresponds to a program object
</documentation>
        <function name="glIsProgram" type="GLboolean">
          <param name="program" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsProgramPipeline - determine if a name corresponds to a program pipeline object
</documentation>
        <function name="glIsProgramPipeline" type="GLboolean">
          <param name="pipeline" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsQuery - determine if a name corresponds to a query object
</documentation>
        <function name="glIsQuery" type="GLboolean">
          <param name="id" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsRenderbuffer - determine if a name corresponds to a renderbuffer object
</documentation>
        <function name="glIsRenderbuffer" type="GLboolean">
          <param name="renderbuffer" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsSampler - determine if a name corresponds to a sampler object
</documentation>
        <function name="glIsSampler" type="GLboolean">
          <param name="id" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsShader - Determines if a name corresponds to a shader object
</documentation>
        <function name="glIsShader" type="GLboolean">
          <param name="shader" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsSync - determine if a name corresponds to a sync object
</documentation>
        <function name="glIsSync" type="GLboolean">
          <param name="sync" type="GLsync"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsTexture - determine if a name corresponds to a texture
</documentation>
        <function name="glIsTexture" type="GLboolean">
          <param name="texture" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsTransformFeedback - determine if a name corresponds to a transform feedback object
</documentation>
        <function name="glIsTransformFeedback" type="GLboolean">
          <param name="id" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glIsVertexArray - determine if a name corresponds to a vertex array object
</documentation>
        <function name="glIsVertexArray" type="GLboolean">
          <param name="array" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glLineWidth - specify the width of rasterized lines
</documentation>
        <function name="glLineWidth" type="void">
          <param name="width" type="GLfloat"/>
        </function>
      </functions>
      <functions>
        <documentation>glLinkProgram - Links a program object
</documentation>
        <function name="glLinkProgram" type="void">
          <param name="program" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glLogicOp - specify a logical pixel operation for rendering
</documentation>
        <function name="glLogicOp" type="void">
          <param name="opcode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glMapBuffer - map a buffer object's data store
</documentation>
        <function name="glMapBuffer" type="void *">
          <param name="target" type="GLenum"/>
          <param name="access" type="GLenum"/>
        </function>
        <function name="glUnmapBuffer" type="GLboolean">
          <param name="target" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glMapBufferRange - map a section of a buffer object's data store
</documentation>
        <function name="glMapBufferRange" type="void *">
          <param name="target" type="GLenum"/>
          <param name="offset" type="GLintptr"/>
          <param name="length" type="GLsizeiptr"/>
          <param name="access" type="GLbitfield"/>
        </function>
      </functions>
      <functions>
        <documentation>glMinSampleShading - specifies minimum rate at which sample shaing takes place
</documentation>
        <function name="glMinSampleShading" type="void">
          <param name="value" type="GLclampf"/>
        </function>
      </functions>
      <functions>
        <documentation>glMultiDrawArrays - render multiple sets of primitives from array data
</documentation>
        <function name="glMultiDrawArrays" type="void">
          <param name="mode" type="GLenum"/>
          <param name="first" type="GLint *"/>
          <param name="count" type="GLsizei *"/>
          <param name="primcount" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glMultiDrawElements - render multiple sets of primitives by specifying indices of array data elements
</documentation>
        <function name="glMultiDrawElements" type="void">
          <param name="mode" type="GLenum"/>
          <param name="count" type="GLsizei *"/>
          <param name="type" type="GLenum"/>
          <param name="indices" type="GLvoid **"/>
          <param name="primcount" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glMultiDrawElementsBaseVertex - render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
</documentation>
        <function name="glMultiDrawElementsBaseVertex" type="void">
          <param name="mode" type="GLenum"/>
          <param name="count" type="GLsizei *"/>
          <param name="type" type="GLenum"/>
          <param name="indices" type="GLvoid **"/>
          <param name="primcount" type="GLsizei"/>
          <param name="basevertex" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glPatchParameter - specifies the parameters for patch primitives
</documentation>
        <function name="glPatchParameteri" type="void">
          <param name="pname" type="GLenum"/>
          <param name="value" type="GLint"/>
        </function>
        <function name="glPatchParameterfv" type="void">
          <param name="pname" type="GLenum"/>
          <param name="values" type="GLfloat *"/>
        </function>
      </functions>
      <functions>
        <documentation>glPauseTransformFeedback - pause transform feedback operations
</documentation>
        <function name="glPauseTransformFeedback" type="void"/>
      </functions>
      <functions>
        <documentation>glPixelStore - set pixel storage modes
</documentation>
        <function name="glPixelStoref" type="void">
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLfloat"/>
        </function>
        <function name="glPixelStorei" type="void">
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glPointParameter - specify point parameters
</documentation>
        <function name="glPointParameterf" type="void">
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLfloat"/>
        </function>
        <function name="glPointParameteri" type="void">
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLint"/>
        </function>
        <function name="glPointParameterfv" type="void">
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLfloat *"/>
        </function>
        <function name="glPointParameteriv" type="void">
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glPointSize - specify the diameter of rasterized points
</documentation>
        <function name="glPointSize" type="void">
          <param name="size" type="GLfloat"/>
        </function>
      </functions>
      <functions>
        <documentation>glPolygonMode - select a polygon rasterization mode
</documentation>
        <function name="glPolygonMode" type="void">
          <param name="face" type="GLenum"/>
          <param name="mode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glPolygonOffset - set the scale and units used to calculate depth values
</documentation>
        <function name="glPolygonOffset" type="void">
          <param name="factor" type="GLfloat"/>
          <param name="units" type="GLfloat"/>
        </function>
      </functions>
      <functions>
        <documentation>glPrimitiveRestartIndex - specify the primitive restart index
</documentation>
        <function name="glPrimitiveRestartIndex" type="void">
          <param name="index" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glProgramBinary - load a program object with a program binary
</documentation>
        <function name="glProgramBinary" type="void">
          <param name="program" type="GLuint"/>
          <param name="binaryFormat" type="GLenum"/>
          <param name="binary" type="void *"/>
          <param name="length" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glProgramParameter - specify a parameter for a program object
</documentation>
        <function name="glProgramParameteri" type="void">
          <param name="program" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="value" type="GLint"/>
        </function>
      </functions>
      <functions>
        <documentation>glProgramUniform1f - Specify the value of a uniform variable for a specified program object
</documentation>
        <function name="glProgramUniform1f" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLfloat"/>
        </function>
        <function name="glProgramUniform2f" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLfloat"/>
          <param name="v1" type="GLfloat"/>
        </function>
        <function name="glProgramUniform3f" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLfloat"/>
          <param name="v1" type="GLfloat"/>
          <param name="v2" type="GLfloat"/>
        </function>
        <function name="glProgramUniform4f" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLfloat"/>
          <param name="v1" type="GLfloat"/>
          <param name="v2" type="GLfloat"/>
          <param name="v3" type="GLfloat"/>
        </function>
        <function name="glProgramUniform1i" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
        </function>
        <function name="glProgramUniform2i" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
        </function>
        <function name="glProgramUniform3i" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLint"/>
        </function>
        <function name="glProgramUniform4i" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLint"/>
          <param name="v3" type="GLint"/>
        </function>
        <function name="glProgramUniform1ui" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLuint"/>
        </function>
        <function name="glProgramUniform2ui" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLuint"/>
        </function>
        <function name="glProgramUniform3ui" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLuint"/>
        </function>
        <function name="glProgramUniform4ui" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLint"/>
          <param name="v3" type="GLuint"/>
        </function>
        <function name="glProgramUniform1fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniform2fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniform3fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniform4fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniform1iv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLint *"/>
        </function>
        <function name="glProgramUniform2iv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLint *"/>
        </function>
        <function name="glProgramUniform3iv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLint *"/>
        </function>
        <function name="glProgramUniform4iv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLint *"/>
        </function>
        <function name="glProgramUniform1uiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLuint *"/>
        </function>
        <function name="glProgramUniform2uiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLuint *"/>
        </function>
        <function name="glProgramUniform3uiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLuint *"/>
        </function>
        <function name="glProgramUniform4uiv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLuint *"/>
        </function>
        <function name="glProgramUniformMatrix2fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniformMatrix3fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniformMatrix4fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniformMatrix2x3fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniformMatrix3x2fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniformMatrix2x4fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniformMatrix4x2fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniformMatrix3x4fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glProgramUniformMatrix4x3fv" type="void">
          <param name="program" type="GLuint"/>
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
      </functions>
      <functions>
        <documentation>glProvokingVertex - specifiy the vertex to be used as the source of data for flat shaded varyings
</documentation>
        <function name="glProvokingVertex" type="void">
          <param name="provokeMode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glQueryCounter - record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
</documentation>
        <function name="glQueryCounter" type="void">
          <param name="id" type="GLuint"/>
          <param name="target" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glReadBuffer - select a color buffer source for pixels
</documentation>
        <function name="glReadBuffer" type="void">
          <param name="mode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glReadPixels - read a block of pixels from the frame buffer
</documentation>
        <function name="glReadPixels" type="void">
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glReleaseShaderCompiler - release resources consumed by the implementation's shader compiler
</documentation>
        <function name="glReleaseShaderCompiler" type="void"/>
      </functions>
      <functions>
        <documentation>glRenderbufferStorage - establish data storage, format and dimensions of a renderbuffer object's image
</documentation>
        <function name="glRenderbufferStorage" type="void">
          <param name="target" type="GLenum"/>
          <param name="internalformat" type="GLenum"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glRenderbufferStorageMultisample - establish data storage, format, dimensions and sample count of a renderbuffer object's image
</documentation>
        <function name="glRenderbufferStorageMultisample" type="void">
          <param name="target" type="GLenum"/>
          <param name="samples" type="GLsizei"/>
          <param name="internalformat" type="GLenum"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glResumeTransformFeedback - resume transform feedback operations
</documentation>
        <function name="glResumeTransformFeedback" type="void"/>
      </functions>
      <functions>
        <documentation>glSampleCoverage - specify multisample coverage parameters
</documentation>
        <function name="glSampleCoverage" type="void">
          <param name="value" type="GLclampf"/>
          <param name="invert" type="GLboolean"/>
        </function>
      </functions>
      <functions>
        <documentation>glSampleMaski - set the value of a sub-word of the sample mask
</documentation>
        <function name="glSampleMaski" type="void">
          <param name="maskNumber" type="GLuint"/>
          <param name="mask" type="GLbitfield"/>
        </function>
      </functions>
      <functions>
        <documentation>glSamplerParameter - set sampler parameters
</documentation>
        <function name="glSamplerParameterf" type="void">
          <param name="sampler" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLfloat"/>
        </function>
        <function name="glSamplerParameteri" type="void">
          <param name="sampler" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLint"/>
        </function>
        <function name="glSamplerParameterfv" type="void">
          <param name="sampler" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLfloat *"/>
        </function>
        <function name="glSamplerParameteriv" type="void">
          <param name="sampler" type="GLuint"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glScissor - define the scissor box
</documentation>
        <function name="glScissor" type="void">
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glScissorArray - define the scissor box for multiple viewports
</documentation>
        <function name="glScissorArrayv" type="void">
          <param name="first" type="GLuint"/>
          <param name="count" type="GLsizei"/>
          <param name="v" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glScissorIndexed - define the scissor box for a specific viewport
</documentation>
        <function name="glScissorIndexed" type="void">
          <param name="index" type="GLuint"/>
          <param name="left" type="GLint"/>
          <param name="bottom" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </function>
        <function name="glScissorIndexedv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glShaderBinary - load pre-compiled shader binaries
</documentation>
        <function name="glShaderBinary" type="void">
          <param name="count" type="GLsizei"/>
          <param name="shaders" type="GLuint *"/>
          <param name="binaryFormat" type="GLenum"/>
          <param name="binary" type="void *"/>
          <param name="length" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glShaderSource - Replaces the source code in a shader object
</documentation>
        <function name="glShaderSource" type="void">
          <param name="shader" type="GLuint"/>
          <param name="count" type="GLsizei"/>
          <param name="string" type="GLchar **"/>
          <param name="length" type="GLint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glStencilFunc - set front and back function and reference value for stencil testing
</documentation>
        <function name="glStencilFunc" type="void">
          <param name="func" type="GLenum"/>
          <param name="_ref" type="GLint"/>
          <param name="mask" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glStencilFuncSeparate - set front and/or back function and reference value for stencil testing
</documentation>
        <function name="glStencilFuncSeparate" type="void">
          <param name="face" type="GLenum"/>
          <param name="func" type="GLenum"/>
          <param name="_ref" type="GLint"/>
          <param name="mask" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glStencilMask - control the front and back writing of individual bits in the stencil planes
</documentation>
        <function name="glStencilMask" type="void">
          <param name="mask" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glStencilMaskSeparate - control the front and/or back writing of individual bits in the stencil planes
</documentation>
        <function name="glStencilMaskSeparate" type="void">
          <param name="face" type="GLenum"/>
          <param name="mask" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glStencilOp - set front and back stencil test actions
</documentation>
        <function name="glStencilOp" type="void">
          <param name="sfail" type="GLenum"/>
          <param name="dpfail" type="GLenum"/>
          <param name="dppass" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glStencilOpSeparate - set front and/or back stencil test actions
</documentation>
        <function name="glStencilOpSeparate" type="void">
          <param name="face" type="GLenum"/>
          <param name="sfail" type="GLenum"/>
          <param name="dpfail" type="GLenum"/>
          <param name="dppass" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexBuffer - attach the storage for a buffer object to the active buffer texture
</documentation>
        <function name="glTexBuffer" type="void">
          <param name="target" type="GLenum"/>
          <param name="internalFormat" type="GLenum"/>
          <param name="buffer" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexImage1D - specify a one-dimensional texture image
</documentation>
        <function name="glTexImage1D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalFormat" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="border" type="GLint"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexImage2D - specify a two-dimensional texture image
</documentation>
        <function name="glTexImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalFormat" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="border" type="GLint"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexImage2DMultisample - establish the data storage, format, dimensions, and number of samples of a multisample texture's image
</documentation>
        <function name="glTexImage2DMultisample" type="void">
          <param name="target" type="GLenum"/>
          <param name="samples" type="GLsizei"/>
          <param name="internalformat" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="fixedsamplelocations" type="GLboolean"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexImage3D - specify a three-dimensional texture image
</documentation>
        <function name="glTexImage3D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalFormat" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="depth" type="GLsizei"/>
          <param name="border" type="GLint"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexImage3DMultisample - establish the data storage, format, dimensions, and number of samples of a multisample texture's image
</documentation>
        <function name="glTexImage3DMultisample" type="void">
          <param name="target" type="GLenum"/>
          <param name="samples" type="GLsizei"/>
          <param name="internalformat" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="depth" type="GLsizei"/>
          <param name="fixedsamplelocations" type="GLboolean"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexParameter - set texture parameters
</documentation>
        <function name="glTexParameterf" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLfloat"/>
        </function>
        <function name="glTexParameteri" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLint"/>
        </function>
        <function name="glTexParameterfv" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLfloat *"/>
        </function>
        <function name="glTexParameteriv" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
        <function name="glTexParameterIiv" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLint *"/>
        </function>
        <function name="glTexParameterIuiv" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="params" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexSubImage1D - specify a one-dimensional texture subimage
</documentation>
        <function name="glTexSubImage1D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexSubImage2D - specify a two-dimensional texture subimage
</documentation>
        <function name="glTexSubImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glTexSubImage3D - specify a three-dimensional texture subimage
</documentation>
        <function name="glTexSubImage3D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="zoffset" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="depth" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="data" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glTransformFeedbackVaryings - specify values to record in transform feedback buffers
</documentation>
        <function name="glTransformFeedbackVaryings" type="void">
          <param name="program" type="GLuint"/>
          <param name="count" type="GLsizei"/>
          <param name="varyings" type="char **"/>
          <param name="bufferMode" type="GLenum"/>
        </function>
      </functions>
      <functions>
        <documentation>glUniform1f - Specify the value of a uniform variable for the current program object
</documentation>
        <function name="glUniform1f" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLfloat"/>
        </function>
        <function name="glUniform2f" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLfloat"/>
          <param name="v1" type="GLfloat"/>
        </function>
        <function name="glUniform3f" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLfloat"/>
          <param name="v1" type="GLfloat"/>
          <param name="v2" type="GLfloat"/>
        </function>
        <function name="glUniform4f" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLfloat"/>
          <param name="v1" type="GLfloat"/>
          <param name="v2" type="GLfloat"/>
          <param name="v3" type="GLfloat"/>
        </function>
        <function name="glUniform1i" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
        </function>
        <function name="glUniform2i" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
        </function>
        <function name="glUniform3i" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLint"/>
        </function>
        <function name="glUniform4i" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLint"/>
          <param name="v3" type="GLint"/>
        </function>
        <function name="glUniform1ui" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLuint"/>
        </function>
        <function name="glUniform2ui" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLuint"/>
        </function>
        <function name="glUniform3ui" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLuint"/>
        </function>
        <function name="glUniform4ui" type="void">
          <param name="location" type="GLint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLint"/>
          <param name="v3" type="GLuint"/>
        </function>
        <function name="glUniform1fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniform2fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniform3fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniform4fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniform1iv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLint *"/>
        </function>
        <function name="glUniform2iv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLint *"/>
        </function>
        <function name="glUniform3iv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLint *"/>
        </function>
        <function name="glUniform4iv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLint *"/>
        </function>
        <function name="glUniform1uiv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLuint *"/>
        </function>
        <function name="glUniform2uiv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLuint *"/>
        </function>
        <function name="glUniform3uiv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLuint *"/>
        </function>
        <function name="glUniform4uiv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="value" type="GLuint *"/>
        </function>
        <function name="glUniformMatrix2fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniformMatrix3fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniformMatrix4fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniformMatrix2x3fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniformMatrix3x2fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniformMatrix2x4fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniformMatrix4x2fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniformMatrix3x4fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
        <function name="glUniformMatrix4x3fv" type="void">
          <param name="location" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="GLfloat *"/>
        </function>
      </functions>
      <functions>
        <documentation>glUniformBlockBinding - assign a binding point to an active uniform block
</documentation>
        <function name="glUniformBlockBinding" type="void">
          <param name="program" type="GLuint"/>
          <param name="uniformBlockIndex" type="GLuint"/>
          <param name="uniformBlockBinding" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glUniformSubroutines - load active subroutine uniforms
</documentation>
        <function name="glUniformSubroutinesuiv" type="void">
          <param name="shadertype" type="GLenum"/>
          <param name="count" type="GLsizei"/>
          <param name="indices" type="GLuint *"/>
        </function>
      </functions>
      <functions>
        <documentation>glUseProgram - Installs a program object as part of current rendering state
</documentation>
        <function name="glUseProgram" type="void">
          <param name="program" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glUseProgramStages - bind stages of a program object to a program pipeline
</documentation>
        <function name="glUseProgramStages" type="void">
          <param name="pipeline" type="GLuint"/>
          <param name="stages" type="GLbitfield"/>
          <param name="program" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glValidateProgram - Validates a program object
</documentation>
        <function name="glValidateProgram" type="void">
          <param name="program" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glValidateProgramPipeline - validate a program pipeline object against current GL state
</documentation>
        <function name="glValidateProgramPipeline" type="void">
          <param name="pipeline" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glVertexAttrib - Specifies the value of a generic vertex attribute
</documentation>
        <function name="glVertexAttrib1f" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLfloat"/>
        </function>
        <function name="glVertexAttrib1s" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLshort"/>
        </function>
        <function name="glVertexAttrib1d" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLdouble"/>
        </function>
        <function name="glVertexAttribI1i" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLint"/>
        </function>
        <function name="glVertexAttribI1ui" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLuint"/>
        </function>
        <function name="glVertexAttrib2f" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLfloat"/>
          <param name="v1" type="GLfloat"/>
        </function>
        <function name="glVertexAttrib2s" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLshort"/>
          <param name="v1" type="GLshort"/>
        </function>
        <function name="glVertexAttrib2d" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLdouble"/>
          <param name="v1" type="GLdouble"/>
        </function>
        <function name="glVertexAttribI2i" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
        </function>
        <function name="glVertexAttribI2ui" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLuint"/>
          <param name="v1" type="GLuint"/>
        </function>
        <function name="glVertexAttrib3f" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLfloat"/>
          <param name="v1" type="GLfloat"/>
          <param name="v2" type="GLfloat"/>
        </function>
        <function name="glVertexAttrib3s" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLshort"/>
          <param name="v1" type="GLshort"/>
          <param name="v2" type="GLshort"/>
        </function>
        <function name="glVertexAttrib3d" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLdouble"/>
          <param name="v1" type="GLdouble"/>
          <param name="v2" type="GLdouble"/>
        </function>
        <function name="glVertexAttribI3i" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLint"/>
        </function>
        <function name="glVertexAttribI3ui" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLoint"/>
          <param name="v1" type="GLoint"/>
          <param name="v2" type="GLoint"/>
        </function>
        <function name="glVertexAttrib4f" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLfloat"/>
          <param name="v1" type="GLfloat"/>
          <param name="v2" type="GLfloat"/>
          <param name="v3" type="GLfloat"/>
        </function>
        <function name="glVertexAttrib4s" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLshort"/>
          <param name="v1" type="GLshort"/>
          <param name="v2" type="GLshort"/>
          <param name="v3" type="GLshort"/>
        </function>
        <function name="glVertexAttrib4d" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLdouble"/>
          <param name="v1" type="GLdouble"/>
          <param name="v2" type="GLdouble"/>
          <param name="v3" type="GLdouble"/>
        </function>
        <function name="glVertexAttrib4Nub" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLubyte"/>
          <param name="v1" type="GLubyte"/>
          <param name="v2" type="GLubyte"/>
          <param name="v3" type="GLubyte"/>
        </function>
        <function name="glVertexAttribI4i" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLint"/>
          <param name="v1" type="GLint"/>
          <param name="v2" type="GLint"/>
          <param name="v3" type="GLint"/>
        </function>
        <function name="glVertexAttribI4ui" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLuint"/>
          <param name="v1" type="GLuint"/>
          <param name="v2" type="GLuint"/>
          <param name="v3" type="GLuint"/>
        </function>
        <function name="glVertexAttribL1d" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLdouble"/>
        </function>
        <function name="glVertexAttribL2d" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLdouble"/>
          <param name="v1" type="GLdouble"/>
        </function>
        <function name="glVertexAttribL3d" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLdouble"/>
          <param name="v1" type="GLdouble"/>
          <param name="v2" type="GLdouble"/>
        </function>
        <function name="glVertexAttribL4d" type="void">
          <param name="index" type="GLuint"/>
          <param name="v0" type="GLdouble"/>
          <param name="v1" type="GLdouble"/>
          <param name="v2" type="GLdouble"/>
          <param name="v3" type="GLdouble"/>
        </function>
        <function name="glVertexAttrib1fv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLfloat *"/>
        </function>
        <function name="glVertexAttrib1sv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLshort *"/>
        </function>
        <function name="glVertexAttrib1dv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLdouble *"/>
        </function>
        <function name="glVertexAttribI1iv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLint *"/>
        </function>
        <function name="glVertexAttribI1uiv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLuint *"/>
        </function>
        <function name="glVertexAttrib2fv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLfloat *"/>
        </function>
        <function name="glVertexAttrib2sv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLshort *"/>
        </function>
        <function name="glVertexAttrib2dv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLdouble *"/>
        </function>
        <function name="glVertexAttribI2iv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLint *"/>
        </function>
        <function name="glVertexAttribI2uiv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLuint *"/>
        </function>
        <function name="glVertexAttrib3fv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLfloat *"/>
        </function>
        <function name="glVertexAttrib3sv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLshort *"/>
        </function>
        <function name="glVertexAttrib3dv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLdouble *"/>
        </function>
        <function name="glVertexAttribI3iv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLint *"/>
        </function>
        <function name="glVertexAttribI3uiv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLuint *"/>
        </function>
        <function name="glVertexAttrib4fv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLfloat *"/>
        </function>
        <function name="glVertexAttrib4sv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLshort *"/>
        </function>
        <function name="glVertexAttrib4dv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLdouble *"/>
        </function>
        <function name="glVertexAttrib4iv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLint *"/>
        </function>
        <function name="glVertexAttrib4bv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLbyte *"/>
        </function>
        <function name="glVertexAttrib4ubv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLubyte *"/>
        </function>
        <function name="glVertexAttrib4usv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLushort *"/>
        </function>
        <function name="glVertexAttrib4uiv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLuint *"/>
        </function>
        <function name="glVertexAttrib4Nbv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLbyte *"/>
        </function>
        <function name="glVertexAttrib4Nsv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLshort *"/>
        </function>
        <function name="glVertexAttrib4Niv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLint *"/>
        </function>
        <function name="glVertexAttrib4Nubv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLubyte *"/>
        </function>
        <function name="glVertexAttrib4Nusv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLushort *"/>
        </function>
        <function name="glVertexAttrib4Nuiv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLuint *"/>
        </function>
        <function name="glVertexAttribI4bv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLbyte *"/>
        </function>
        <function name="glVertexAttribI4ubv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLubyte *"/>
        </function>
        <function name="glVertexAttribI4sv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLshort *"/>
        </function>
        <function name="glVertexAttribI4usv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLushort *"/>
        </function>
        <function name="glVertexAttribI4iv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLint *"/>
        </function>
        <function name="glVertexAttribI4uiv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLuint *"/>
        </function>
        <function name="glVertexAttribL1dv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLdouble *"/>
        </function>
        <function name="glVertexAttribL2dv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLdouble *"/>
        </function>
        <function name="glVertexAttribL3dv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLdouble *"/>
        </function>
        <function name="glVertexAttribL4dv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLdouble *"/>
        </function>
        <function name="glVertexAttribP1ui" type="void">
          <param name="index" type="GLuint"/>
          <param name="type" type="GLenum"/>
          <param name="normalized" type="GLboolean"/>
          <param name="value" type="GLuint"/>
        </function>
        <function name="glVertexAttribP2ui" type="void">
          <param name="index" type="GLuint"/>
          <param name="type" type="GLenum"/>
          <param name="normalized" type="GLboolean"/>
          <param name="value" type="GLuint"/>
        </function>
        <function name="glVertexAttribP3ui" type="void">
          <param name="index" type="GLuint"/>
          <param name="type" type="GLenum"/>
          <param name="normalized" type="GLboolean"/>
          <param name="value" type="GLuint"/>
        </function>
        <function name="glVertexAttribP4ui" type="void">
          <param name="index" type="GLuint"/>
          <param name="type" type="GLenum"/>
          <param name="normalized" type="GLboolean"/>
          <param name="value" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glVertexAttribDivisor - modify the rate at which generic vertex attributes advance during instanced rendering
</documentation>
        <function name="glVertexAttribDivisor" type="void">
          <param name="index" type="GLuint"/>
          <param name="divisor" type="GLuint"/>
        </function>
      </functions>
      <functions>
        <documentation>glVertexAttribPointer - define an array of generic vertex attribute data
</documentation>
        <function name="glVertexAttribPointer" type="void">
          <param name="index" type="GLuint"/>
          <param name="size" type="GLint"/>
          <param name="type" type="GLenum"/>
          <param name="normalized" type="GLboolean"/>
          <param name="stride" type="GLsizei"/>
          <param name="pointer" type="GLvoid *"/>
        </function>
        <function name="glVertexAttribIPointer" type="void">
          <param name="index" type="GLuint"/>
          <param name="size" type="GLint"/>
          <param name="type" type="GLenum"/>
          <param name="stride" type="GLsizei"/>
          <param name="pointer" type="GLvoid *"/>
        </function>
        <function name="glVertexAttribLPointer" type="void">
          <param name="index" type="GLuint"/>
          <param name="size" type="GLint"/>
          <param name="type" type="GLenum"/>
          <param name="stride" type="GLsizei"/>
          <param name="pointer" type="GLvoid *"/>
        </function>
      </functions>
      <functions>
        <documentation>glViewport - set the viewport
</documentation>
        <function name="glViewport" type="void">
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </function>
      </functions>
      <functions>
        <documentation>glViewportArray - set multiple viewports
</documentation>
        <function name="glViewportArrayv" type="void">
          <param name="first" type="GLuint"/>
          <param name="count" type="GLsizei"/>
          <param name="v" type="GLfloat *"/>
        </function>
      </functions>
      <functions>
        <documentation>glViewportIndexed - set a specified viewport
</documentation>
        <function name="glViewportIndexedf" type="void">
          <param name="index" type="GLuint"/>
          <param name="x" type="GLfloat"/>
          <param name="y" type="GLfloat"/>
          <param name="w" type="GLfloat"/>
          <param name="h" type="GLfloat"/>
        </function>
        <function name="glViewportIndexedfv" type="void">
          <param name="index" type="GLuint"/>
          <param name="v" type="GLfloat *"/>
        </function>
      </functions>
      <functions>
        <documentation>glWaitSync - instruct the GL server to block until the specified sync object becomes signaled
</documentation>
        <function name="glWaitSync" type="void">
          <param name="sync" type="GLsync"/>
          <param name="flags" type="GLbitfield"/>
          <param name="timeout" type="GLuint64"/>
        </function>
      </functions>
    </library>
  </libraries>
</module>
